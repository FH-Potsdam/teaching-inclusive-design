WEBVTT

00:00:04.720 --> 00:00:09.440
Many of the commands we will use to create 
our object in JSCAD will be quite familiar  

00:00:09.440 --> 00:00:15.120
from what we already learned through p5.js. 
In this first video i will show you how to  

00:00:15.120 --> 00:00:21.040
create simple 2D shapes. Why 2D shapes in a 
3D environment? In one of the next videos,  

00:00:21.040 --> 00:00:27.840
i will explain you how you can use 2D shapes to 
extrude them and thereby create 3D shapes. You can  

00:00:27.840 --> 00:00:33.840
start with very simple simple 2D shapes and then 
use the extrusion functions to create 3D objects.  

00:00:35.440 --> 00:00:41.280
I've created a very simple array here and we will 
use the array to push all our 2d objects into it  

00:00:41.280 --> 00:00:46.720
and then we return it as part of the main 
function, to then preview it in our renderer.  

00:00:48.160 --> 00:00:54.560
We start with the most simple one, the line. I 
will create a variable to store our line object in  

00:00:55.680 --> 00:01:00.640
and then call the line command. The line 
command takes a simple array with two  

00:01:01.200 --> 00:01:09.280
coordinates, the start and the end point. 
And i will start at -50/-50 and go to 50/50.  

00:01:10.720 --> 00:01:15.120
And then of course i need to add it to 
our array so that we can actually see it.

00:01:19.040 --> 00:01:26.160
Save it and now in the preview we can see we 
have drawn a line in our coordinate system.  

00:01:26.160 --> 00:01:35.040
The next object we already know from p5.js. It's 
the arc. The arc function now takes an object as  

00:01:35.040 --> 00:01:43.680
a parameter, and here we first start by defining 
the center of our circle, which we then take one  

00:01:43.680 --> 00:01:52.960
arc from. By default this is 0/0. I will leave 
it at that. Then we need to define the radius.  

00:01:52.960 --> 00:02:00.240
I will define this by 500 and then 
we need to define the startAngle  

00:02:01.680 --> 00:02:10.640
and the endAngle of our arc, similar to p5.js. 
And similar to p5.js we need to define this in  

00:02:10.640 --> 00:02:18.400
radians. So again our little formula. PI 
divided by 180 and now we can simply multiply it  

00:02:18.960 --> 00:02:25.840
by the degrees we want the angle to go to. 
So i will draw this from 0 to 90 degrees  

00:02:26.720 --> 00:02:34.000
and then we need to define segments. So whenever 
we want to draw something round in a 3D space,  

00:02:34.000 --> 00:02:40.640
we usually need to provide segments, because round 
things are divided into smaller straight lines or  

00:02:40.640 --> 00:02:46.720
smaller straight planes that are connected to 
one another. The reason behind this is that  

00:02:46.720 --> 00:02:54.720
calculating certain things in 3D space, based on 
round shapes is very complicated, and to make the  

00:02:54.720 --> 00:03:02.400
calculations faster, we use straight lines and 
the more segments we divide the circle into, the  

00:03:02.400 --> 00:03:09.120
more complex our structure becomes and the slower 
the processing gets. So you always have to think:  

00:03:09.120 --> 00:03:16.720
how many segments do i really need to make it look 
round and how much segments can my system process  

00:03:16.720 --> 00:03:24.480
in time. I will use 32 segments to divide our 
circle by. Push the whole thing into our array.

00:03:28.800 --> 00:03:38.240
And now we have a quarter of a circle drawn here. 
And to continue, there are two more functions  

00:03:38.240 --> 00:03:46.800
to draw round-ish objects. The second one is 
the circle. For the circle we can almost use  

00:03:46.800 --> 00:03:51.760
the same parameters as for arc. This is why 
i'm simply replacing our arc function here.  

00:03:53.040 --> 00:03:59.200
In this case, obviously, we don't need a start and 
end angle, because we want to draw it from 0 to  

00:03:59.200 --> 00:04:07.680
2 times PI, is 360 degrees, so i can simply remove 
the start and end angle and now get a circle. And  

00:04:07.680 --> 00:04:15.280
for the ellipse it's also almost the same, but 
an ellipse can obviously have different height  

00:04:15.280 --> 00:04:22.720
and width, so instead of only providing one 
radius, we can provide an array of radii and,  

00:04:23.360 --> 00:04:29.120
thereby, create an ellipse object and 
that has a different width and height.  

00:04:30.640 --> 00:04:37.680
The last object i want to introduce you to is the 
rectangle. For this we use the rectangle function  

00:04:37.680 --> 00:04:44.320
which also takes an object again, we have 
the center where this should be placed,

00:04:47.040 --> 00:04:53.040
and then we have the size parameter. And again 
because it has different width and height,  

00:04:53.760 --> 00:05:02.160
we have an array of two elements. And then 
we need to push it into our objects array.

00:05:05.680 --> 00:05:09.840
Save the whole thing and now 
we have a rectangle as well.