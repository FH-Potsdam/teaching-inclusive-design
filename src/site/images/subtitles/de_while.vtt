WEBVTT

00:00:04.620 --> 00:00:10.380
Bisher haben wir unsere Objekte immer einzeln 
gezeichnet. So wie diesen Kreis hier. Wenn wir  

00:00:10.380 --> 00:00:15.420
aber komplexere parametrische, generative 
Grafiken und Objekte generieren wollen,  

00:00:15.420 --> 00:00:19.350
dann müssen wir natürlich auch ganz 
viele Elemente zeichnen. Und wenn wir  

00:00:19.350 --> 00:00:22.230
uns jetzt zum Beispiel vorstellen, wir 
wollen jetzt ganz viele kreise zeichnen,  

00:00:22.230 --> 00:00:27.750
sagen wir, wir wollen fünf Stück auf der 
x-Achse angeordnete zeichnen. Könnten  

00:00:27.750 --> 00:00:32.010
wir jetzt hier einfach den Code fünfmal 
kopieren. Müssten uns jetzt überlegen,  

00:00:32.010 --> 00:00:38.670
okay, der erste soll bei 20 Pixeln sein, der 
nächste bei 40, 60, 80 und so weiter. Also  

00:00:38.670 --> 00:00:50.700
müssen sozusagen hier die 20 immer größer werden 
lassen. Also erstmal 1x 2x 3x 4x und so weiter.

00:00:50.700 --> 00:00:56.250
Und das wäre natürlich jetzt relativ 
viel arbeiten. Denn wenn wir uns  

00:00:56.250 --> 00:00:59.790
vorstellen wir wollen jetzt 100 Kreise zeichnen, 
dann müssten wir das jetzt 100 mal hin schreiben,  

00:00:59.790 --> 00:01:06.300
um das zu lösen haben wir in JavaScript sogenannte 
Loops/Schleifen die wir benutzen können, um solche  

00:01:06.300 --> 00:01:12.060
iterativen Aufgaben zu erledigen. Was wir hierfür 
machen müssen, wir müssen uns Gedanken machen,  

00:01:12.060 --> 00:01:17.730
wie wir unseren Code so systematisch 
aufbrechen können, sodass er sozusagen  

00:01:17.730 --> 00:01:23.670
im Rahmen eines Loops erledigt werden kann. In 
diesem Fall hier ist es relativ offensichtlich,  

00:01:23.670 --> 00:01:28.860
weil wir haben hier sozusagen die 20, die den 
X-Abstand definiert und dieser wird immer um  

00:01:28.860 --> 00:01:35.310
1 höher. Also was wir im Grunde wollen ist, dass 
wir hier diesen Teil durch eine Variable ersetzen,  

00:01:35.310 --> 00:01:43.170
die dann sozusagen bei jeder Schleife um 1 höher 
wird. Und in diesem Video zeige ich euch jetzt den  

00:01:43.170 --> 00:01:52.380
WHILE-LOOP und im nächsten dann den FOR-LOOP. Also 
was wir brauchen ist "let x =1". Das ist sozusagen  

00:01:52.380 --> 00:01:57.540
unsere erster Kreis und dann wollen wir jetzt 
das sozusagen während die Schleife läuft das X  

00:01:57.540 --> 00:02:03.690
immer größer wird. Und um das zu machen können 
wir einfach WHILE schreiben danach geschweifte  

00:02:03.690 --> 00:02:08.190
Klammern. Genau wie bei unseren Funktionen 
definieren die geschweiften Klammern wieder  

00:02:08.190 --> 00:02:13.740
sozusagen was Teil unserer Schleife ist. Also 
alles was innerhalb der geschweiften Klammern ist,  

00:02:13.740 --> 00:02:18.660
wird ausgeführt während die Schleife läuft. 
Nun müssen wir der Schleife sagen wie lange  

00:02:18.660 --> 00:02:25.260
sie denn laufen soll und in unserem Fall soll sie 
so lange laufen, solange X kleiner gleich fünf ist  

00:02:25.260 --> 00:02:30.810
und wenn ich das jetzt einfach starten würde, dann 
würde das ganze endlos laufen und wahrscheinlich  

00:02:30.810 --> 00:02:37.560
abstürzen weil X ja nicht größer wird, sondern X 
wäre immer eins. Und damit es aber größer wird,  

00:02:37.560 --> 00:02:46.230
sagen wir am Ende der Schleife X soll nach jeder 
Schleife 1 dazu addiert werden. Wenn ich das jetzt  

00:02:46.230 --> 00:02:51.060
speicher, sehe ich, dass wieder fünf Kreise 
gezeichnet werden und das Schöne ist jetzt.  

00:02:51.060 --> 00:02:55.950
dass ich einfach nur diese Kondition ändern 
muss, die definiert wie lange unsere Schleife  

00:02:55.950 --> 00:03:01.920
läuft. Wenn ich jetzt speichern drücke, bekomme 
ich 10. Man könnte das natürlich jetzt einfach  

00:03:01.920 --> 00:03:07.830
beliebig fortsetzen, um ganz viele Kreise zu 
zeichnen. Das tolle an solchen Schleifen ist,  

00:03:07.830 --> 00:03:12.900
dass wir diese auch verschachteln können. Also 
wir können zum Beispiel auch innerhalb dieser  

00:03:12.900 --> 00:03:18.090
Schleife eine weitere Schleife starten, die 
machen wir einfach mal für unsere Y-Richtung.

00:03:18.090 --> 00:03:27.750
Und schreiben dann ich hier jetzt eine neue 
Schleife mit Konditionen und Y soll ebenfalls so  

00:03:27.750 --> 00:03:34.500
lange gemacht werden, wie es kleiner gleich zehn 
ist. Öffnen danach sozusagen den Scope unserer  

00:03:34.500 --> 00:03:41.370
while-Schleife, schließen die wieder und am Ende 
müssen wir natürlich auch zu Y 1 dazu addieren,  

00:03:41.370 --> 00:03:47.250
sonst läuft die ewig und stürzt uns wahrscheinlich 
ab. Und schon haben wir sozusagen hier jetzt  

00:03:47.250 --> 00:03:54.360
ein großes Grid in dem Fall also 100 Objekte die 
gezeichnet wurden mit nur ganz wenigen Zeilen Code